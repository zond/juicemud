// Code generated by generator, DO NOT EDIT.
package structs

import (
	gojson "github.com/goccy/go-json"
	"sync"
)

type PostUnlockObject func(*Object)

func (f PostUnlockObject) call(v *Object) {
	if f != nil {
		f(v)
	}
}

type Object struct {
	Unsafe     *ObjectDO
	PostUnlock PostUnlockObject `faker:"-" json:"-"`
	mutex      sync.RWMutex
}

func (v *Object) Describe() string {
	b, _ := gojson.MarshalIndent(v.Unsafe, "", "  ")
	return string(b)
}
func (v *Object) Lock() {
	v.mutex.Lock()
}
func (v *Object) Unlock() {
	v.mutex.Unlock()
	v.PostUnlock.call(v)
}
func (v *Object) RLock() {
	v.mutex.RLock()
}
func (v *Object) RUnlock() {
	v.mutex.RUnlock()
}
func (v *Object) Size() int {
	return v.Unsafe.Size()
}
func (v *Object) Marshal(b []byte) {
	v.RLock()
	defer v.RUnlock()
	v.Unsafe.Marshal(b)
}
func (v *Object) Unmarshal(b []byte) error {
	v.Lock()
	defer v.Unlock()
	v.Unsafe = new(ObjectDO)
	return v.Unsafe.Unmarshal(b)
}
func (v *Object) SetPostUnlock(p func(*Object)) {
	v.PostUnlock = p
}
func (v *Object) GetId() string {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Id
}
func (v *Object) SetId(p string) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Id = p
}
func (v *Object) GetCallbacks() map[string]map[string]bool {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Callbacks
}
func (v *Object) SetCallbacks(p map[string]map[string]bool) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Callbacks = p
}
func (v *Object) GetState() string {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.State
}
func (v *Object) SetState(p string) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.State = p
}
func (v *Object) GetLocation() string {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Location
}
func (v *Object) SetLocation(p string) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Location = p
}
func (v *Object) GetContent() map[string]bool {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Content
}
func (v *Object) SetContent(p map[string]bool) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Content = p
}
func (v *Object) GetLearning() bool {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Learning
}
func (v *Object) SetLearning(p bool) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Learning = p
}
func (v *Object) GetSkills() map[string]Skill {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Skills
}
func (v *Object) SetSkills(p map[string]Skill) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Skills = p
}
func (v *Object) GetDescriptions() []Description {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Descriptions
}
func (v *Object) SetDescriptions(p []Description) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Descriptions = p
}
func (v *Object) GetExits() []Exit {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.Exits
}
func (v *Object) SetExits(p []Exit) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.Exits = p
}
func (v *Object) GetSourcePath() string {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.SourcePath
}
func (v *Object) SetSourcePath(p string) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.SourcePath = p
}
func (v *Object) GetSourceModTime() int64 {
	v.RLock()
	defer v.RUnlock()
	return v.Unsafe.SourceModTime
}
func (v *Object) SetSourceModTime(p int64) {
	v.Lock()
	defer v.Unlock()
	v.Unsafe.SourceModTime = p
}
