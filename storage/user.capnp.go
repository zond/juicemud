// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type User capnp.Struct

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0x84b4c0160acf3f04

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return User(st), err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return User(st), err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.Root()
	return User(root.Struct()), err
}

func (s User) String() string {
	str, _ := text.Marshal(0x84b4c0160acf3f04, capnp.Struct(s))
	return str
}

func (s User) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (User) DecodeFromPtr(p capnp.Ptr) User {
	return User(capnp.Struct{}.DecodeFromPtr(p))
}

func (s User) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s User) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s User) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s User) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s User) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s User) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s User) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s User) PasswordHash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s User) HasPasswordHash() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s User) SetPasswordHash(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s User) Owner() bool {
	return capnp.Struct(s).Bit(0)
}

func (s User) SetOwner(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// User_List is a list of User.
type User_List = capnp.StructList[User]

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[User](l), err
}

// User_Future is a wrapper for a User promised by a client call.
type User_Future struct{ *capnp.Future }

func (f User_Future) Struct() (User, error) {
	p, err := f.Future.Ptr()
	return User(p.Struct()), err
}

const schema_a687d0c53195176c = "x\xda\x8c\x91\xcdk\x13Q\x14\xc5\xcfy/1E\x13" +
	"\xd2a\x82\xbaP\x0a*\xf8A-\xad\xb8(\x15i7" +
	"\xb5\x15S\xf1\x16\x0b\"\x82\x8e\xc9\xab\x19\xc9\xc78\x93" +
	"\x98M\x17Z\x05w\x8a\x85\"\xaeD\xd0\x82\x0b\x11A" +
	"p+HW\"\xd5?\xc0\xad\xae\xec\xae\x1b7#/" +
	"\xe9\xa4\xdaUw\x97\xcb\xb9\xe7\xfe\xee\xb9\xc3g8\x91" +
	"\x1a\xc9\xadi(\x19L\xef\x8aS\xe3k\xbb\xf7~\xfa" +
	"\xf0\x10\xb2\x87\x8c\xab\xfb\x96GV\xbf=ZAZe" +
	"\x00\xf7+\x17\xdd\xef\xecV\xef\xc0x\xf6\xe9\x8f\xd5\xc7" +
	"\x07_\xact\xc5g\x7f\x1f\xed\x7f\x16\xcd?GZ[" +
	"\x89\xaf\x16\xdd\x9a\xeaV\xbf\xc0xc\xb9o\xfd\xc2\xfe" +
	"\xccG8.\xe3\xd1\xc3\x0f\x16\xa4\xf4\xfa\xcb\xa6\xf1\xa4" +
	"\xfe\xe3JgjF\xb7\xc1\xf8\xfe\xbd\xa5\x97s\xf5\xcf" +
	"\x1bp\xb2\x8c\x9f\xdc-\x1ex\x95^\xff\xb9\xa9}\xa3" +
	"\x97\xdc\xf7\x1d\xed[\xdd\xc6\xc5\xb8\x15\x99p\xa8\xe4\x05" +
	"\xac\x07cs\x91\x09q\x89\x94\xacN\x01)\x02\xce\xe4" +
	"\x09@&4\xa5\xa8\xe8\x90\x05\xda\xe6\xf9\xdb\x80Lk" +
	"\xcaeE\xaa\x02\x15\xe0\xc8)@\x8a\x9arE1_" +
	"\xf7j\x86Y(f\xc18\xf0\xa2\xa8\xdd\x08\xcb\xc8O" +
	"{Q\x859(\xe6\xc0\x81F\xbbnB\x12\x8a\x04\xe3" +
	"y\xbfj\x12\x8cs~\xd5t0\xfa{\x18\x9e\xc5\xb8" +
	"\xa6)\x15\xc5\x84\xc2\x1c\x02\xe4\x86\xa6T\x15\x1d\xc5." +
	"\x86?\x0bHES\x9a\x8a\x8eV\x05j\xc0\xb9s\x15" +
	"\x90@S\x16\x14\xf3\x81\xd7\xac$l\x99\xb2\xbf\x85\x10" +
	"\x1a\xaf<\x156Z`\xd0co\x87~\xd3L\x85\x0d" +
	"\xe8\xd6V\xf3V\xd8h\x05\xd7kF\xd5nv\xb3\xab" +
	"\x07cv0\x18\x9f1\xb6e\xd1\xfbz\xe8\xc7-\xfa" +
	"\x11M\x19\xfe'\xc1\x936\xadc\x9arZ1o_" +
	"\x90\x98\x0ft\xcc\xff_5T\xf2\x98\xec`\xb0\x13w" +
	"{\xef\xa0\xa6\x8cn\xffE'\xf4m\xf7\xfc\x0d\x00\x00" +
	"\xff\xff\x16\xac\x94\xe3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a687d0c53195176c,
		Nodes: []uint64{
			0x84b4c0160acf3f04,
			0xa69f1d8ec5dd9152,
			0xb707184bee0895f5,
			0xf5c36e55a1928081,
		},
		Compressed: true,
	})
}
