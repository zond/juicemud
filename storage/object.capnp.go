// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0xbc7ab37c3dc9daa6

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 9})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 9})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0xbc7ab37c3dc9daa6, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Object) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Object) Location() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Object) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) SetLocation(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Object) Content() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Object) HasContent() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object) SetContent(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Object) NewContent(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object) Callbacks() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Object) HasCallbacks() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object) SetCallbacks(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCallbacks sets the callbacks field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object) NewCallbacks(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Object) Skills() (Object_Skill_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Object_Skill_List(p.List()), err
}

func (s Object) HasSkills() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Object) SetSkills(v Object_Skill_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSkills sets the skills field to a newly
// allocated Object_Skill_List, preferring placement in s's segment.
func (s Object) NewSkills(n int32) (Object_Skill_List, error) {
	l, err := NewObject_Skill_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Skill_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Object) Descriptions() (Object_Description_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Object_Description_List(p.List()), err
}

func (s Object) HasDescriptions() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Object) SetDescriptions(v Object_Description_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewDescriptions sets the descriptions field to a newly
// allocated Object_Description_List, preferring placement in s's segment.
func (s Object) NewDescriptions(n int32) (Object_Description_List, error) {
	l, err := NewObject_Description_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Description_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Object) Exits() (Object_Exit_List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return Object_Exit_List(p.List()), err
}

func (s Object) HasExits() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Object) SetExits(v Object_Exit_List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewExits sets the exits field to a newly
// allocated Object_Exit_List, preferring placement in s's segment.
func (s Object) NewExits(n int32) (Object_Exit_List, error) {
	l, err := NewObject_Exit_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Exit_List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Object) State() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s Object) HasState() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Object) StateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s Object) SetState(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s Object) Source() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s Object) HasSource() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Object) SourceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s Object) SetSource(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 9}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

type Object_Skill capnp.Struct

// Object_Skill_TypeID is the unique identifier for the type Object_Skill.
const Object_Skill_TypeID = 0xc8b64858fead2249

func NewObject_Skill(s *capnp.Segment) (Object_Skill, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Skill(st), err
}

func NewRootObject_Skill(s *capnp.Segment) (Object_Skill, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Skill(st), err
}

func ReadRootObject_Skill(msg *capnp.Message) (Object_Skill, error) {
	root, err := msg.Root()
	return Object_Skill(root.Struct()), err
}

func (s Object_Skill) String() string {
	str, _ := text.Marshal(0xc8b64858fead2249, capnp.Struct(s))
	return str
}

func (s Object_Skill) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Skill) DecodeFromPtr(p capnp.Ptr) Object_Skill {
	return Object_Skill(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Skill) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Skill) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Skill) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Skill) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Skill) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Skill) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Skill) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Skill) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Skill) Theoretical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Object_Skill) SetTheoretical(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Object_Skill) Practical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Object_Skill) SetPractical(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Object_Skill_List is a list of Object_Skill.
type Object_Skill_List = capnp.StructList[Object_Skill]

// NewObject_Skill creates a new list of Object_Skill.
func NewObject_Skill_List(s *capnp.Segment, sz int32) (Object_Skill_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Object_Skill](l), err
}

// Object_Skill_Future is a wrapper for a Object_Skill promised by a client call.
type Object_Skill_Future struct{ *capnp.Future }

func (f Object_Skill_Future) Struct() (Object_Skill, error) {
	p, err := f.Future.Ptr()
	return Object_Skill(p.Struct()), err
}

type Object_Challenge capnp.Struct

// Object_Challenge_TypeID is the unique identifier for the type Object_Challenge.
const Object_Challenge_TypeID = 0xd9a1cd92e8f3c467

func NewObject_Challenge(s *capnp.Segment) (Object_Challenge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Challenge(st), err
}

func NewRootObject_Challenge(s *capnp.Segment) (Object_Challenge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Challenge(st), err
}

func ReadRootObject_Challenge(msg *capnp.Message) (Object_Challenge, error) {
	root, err := msg.Root()
	return Object_Challenge(root.Struct()), err
}

func (s Object_Challenge) String() string {
	str, _ := text.Marshal(0xd9a1cd92e8f3c467, capnp.Struct(s))
	return str
}

func (s Object_Challenge) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Challenge) DecodeFromPtr(p capnp.Ptr) Object_Challenge {
	return Object_Challenge(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Challenge) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Challenge) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Challenge) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Challenge) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Challenge) Skill() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Challenge) HasSkill() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Challenge) SkillBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Challenge) SetSkill(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Challenge) Level() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Object_Challenge) SetLevel(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// Object_Challenge_List is a list of Object_Challenge.
type Object_Challenge_List = capnp.StructList[Object_Challenge]

// NewObject_Challenge creates a new list of Object_Challenge.
func NewObject_Challenge_List(s *capnp.Segment, sz int32) (Object_Challenge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Object_Challenge](l), err
}

// Object_Challenge_Future is a wrapper for a Object_Challenge promised by a client call.
type Object_Challenge_Future struct{ *capnp.Future }

func (f Object_Challenge_Future) Struct() (Object_Challenge, error) {
	p, err := f.Future.Ptr()
	return Object_Challenge(p.Struct()), err
}

type Object_Description capnp.Struct

// Object_Description_TypeID is the unique identifier for the type Object_Description.
const Object_Description_TypeID = 0xa79088abb6334aec

func NewObject_Description(s *capnp.Segment) (Object_Description, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Description(st), err
}

func NewRootObject_Description(s *capnp.Segment) (Object_Description, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Description(st), err
}

func ReadRootObject_Description(msg *capnp.Message) (Object_Description, error) {
	root, err := msg.Root()
	return Object_Description(root.Struct()), err
}

func (s Object_Description) String() string {
	str, _ := text.Marshal(0xa79088abb6334aec, capnp.Struct(s))
	return str
}

func (s Object_Description) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Description) DecodeFromPtr(p capnp.Ptr) Object_Description {
	return Object_Description(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Description) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Description) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Description) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Description) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Description) Short() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Description) HasShort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Description) ShortBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Description) SetShort(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Description) Long() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object_Description) HasLong() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object_Description) LongBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object_Description) SetLong(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Object_Description) Tags() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Object_Description) HasTags() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object_Description) SetTags(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object_Description) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object_Description) Challenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Description) HasChallenges() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object_Description) SetChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewChallenges sets the challenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Description) NewChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Object_Description_List is a list of Object_Description.
type Object_Description_List = capnp.StructList[Object_Description]

// NewObject_Description creates a new list of Object_Description.
func NewObject_Description_List(s *capnp.Segment, sz int32) (Object_Description_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Object_Description](l), err
}

// Object_Description_Future is a wrapper for a Object_Description promised by a client call.
type Object_Description_Future struct{ *capnp.Future }

func (f Object_Description_Future) Struct() (Object_Description, error) {
	p, err := f.Future.Ptr()
	return Object_Description(p.Struct()), err
}

type Object_Exit capnp.Struct

// Object_Exit_TypeID is the unique identifier for the type Object_Exit.
const Object_Exit_TypeID = 0xdd6ce297dd67d15e

func NewObject_Exit(s *capnp.Segment) (Object_Exit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Exit(st), err
}

func NewRootObject_Exit(s *capnp.Segment) (Object_Exit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Exit(st), err
}

func ReadRootObject_Exit(msg *capnp.Message) (Object_Exit, error) {
	root, err := msg.Root()
	return Object_Exit(root.Struct()), err
}

func (s Object_Exit) String() string {
	str, _ := text.Marshal(0xdd6ce297dd67d15e, capnp.Struct(s))
	return str
}

func (s Object_Exit) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Exit) DecodeFromPtr(p capnp.Ptr) Object_Exit {
	return Object_Exit(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Exit) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Exit) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Exit) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Exit) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Exit) Descriptions() (Object_Description_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Object_Description_List(p.List()), err
}

func (s Object_Exit) HasDescriptions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Exit) SetDescriptions(v Object_Description_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDescriptions sets the descriptions field to a newly
// allocated Object_Description_List, preferring placement in s's segment.
func (s Object_Exit) NewDescriptions(n int32) (Object_Description_List, error) {
	l, err := NewObject_Description_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Description_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Object_Exit) UseChallenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Exit) HasUseChallenges() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object_Exit) SetUseChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewUseChallenges sets the useChallenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Exit) NewUseChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Object_Exit) UseFailureDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Object_Exit) HasUseFailureDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object_Exit) UseFailureDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Object_Exit) SetUseFailureDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Object_Exit) Destination() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s Object_Exit) HasDestination() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object_Exit) SetDestination(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// Object_Exit_List is a list of Object_Exit.
type Object_Exit_List = capnp.StructList[Object_Exit]

// NewObject_Exit creates a new list of Object_Exit.
func NewObject_Exit_List(s *capnp.Segment, sz int32) (Object_Exit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Object_Exit](l), err
}

// Object_Exit_Future is a wrapper for a Object_Exit promised by a client call.
type Object_Exit_Future struct{ *capnp.Future }

func (f Object_Exit_Future) Struct() (Object_Exit, error) {
	p, err := f.Future.Ptr()
	return Object_Exit(p.Struct()), err
}

const schema_d258d93c56221e58 = "x\xda\x8c\x94O\x88\x1cE\x18\xc5\xdf\xab\x9a\x9eY\xc3" +
	"Nv\x9b\xee=\xac\x07[\xc3\x06b \x12w=h" +
	"\x88$\xa8\xd1$\x04\xdc\xda\x09\xb2H\x90\xf4\xf4\x143" +
	"\xbdi\xbb\x87\xe9\x1e]e\x17\xf5\xe6Q%\xa0\x07\x05" +
	"\xf5\xa0\x82\x88\xa8\x98\x93\x1e\x04\x0f*x0\xb7\x08\xb9" +
	"xI\x0e\x0a\xfe\xc9E\x10[\xaag\xbb\xa7Y\x16\xf5" +
	"\xd6\xf5\xabo\xaa\xbez\xef}s\xb4-N6\xeem" +
	"{\x12B-Y\xcd\xfc\xe7\xb3+W>|\xf9\x95\xf7" +
	"a\xbb\xcc\xdf\xfb\xf1\xdb\x07\xb7>{\xfe\x0bX\x8d\x16" +
	"\xb02\xa6\xa0\xf3\x12[\x80\xb3\xcd\x1b\xa8\xed\xdbm\xe6" +
	"\xebw\x1cx\xe2\xf8\xb5\xf5\xab\xb0n3\x15c\xf1\xae" +
	"\xb3-\x1e\x03V>\x119\xc1\xfc\xcc\x81\x8f\xfe^?" +
	"}\xe5\x1b(\x97\xf5\xa3\x8b\xf3\xda\xd6Ug\xd12_" +
	"\x0b\xd6\xc7`\xde\xff\xfa\x8f\x9b\xaf}\xff\xce\xb5=\x8b" +
	"?\xb7~w\xbe*\x8a\xbf\xb4\x9e\x05\xf3\xa7~\xe8_" +
	"\x7f\xfd\xa7\xe8\xfa\x1e=;\x8b\xcd\xef\x9c\x83M\xf3u" +
	"W\xf3\x06\x8e\xe4IwC\x07\xd9=\x81\xf4\x87\xf1\xf0" +
	"\xd8\xe3\x93\xd5#:\x0dF\xe10\x0b\x93\x18\xab\xa4\x9a" +
	"\x97\x0d\xa0A\xc0\xf6\x97\x01uAR\x0d\x04m\xd2\xa5" +
	"\x81\xfa0\xa0.J\xaaH\xd0\x16\xc2\xa5\x00\xec\xd0\xc0" +
	"\x9e\xa4zQ\xd0\x96\xd2\xa5\x04\xec\xed'\x01\xb5%\xa9" +
	"\xde\x10\xf4\xd2A2\xca8\x0b\xc1Yp.J\xe2~" +
	"\xb5\xc8\xfc~\xca\xfd\xe0\xaad\xc1\xf6\x83y0\xf0\xa3" +
	"H\xc7}H]\xed\xcdO\x85\x01\x8b\xaa\xf2=,\xdf" +
	"\xd3\xd2A\xa6\xe6Y\xd3\xdb^\\\x9e\xfe\xcc^X\xab" +
	"y\xbc\xd0\xad\x89\xb7p\xd8\xeb\\\x0a\xa3(\x7f\xb8\xbc" +
	"\x99:/\xa5A+L\xe2\xb9S\x9ba\xa6\x96*u" +
	"~\xb9\x1dP7%\xd5\xad\x9a:\xbf\x9d\x05\xd4\xaf\x92" +
	"\xea\xaf\x9a:\x7f>\x04\xa8[\x92\x9dyN\xe5q\xda" +
	"\\\x03:\xb3\x94\xec\x1c2\xbc\xd1p\xd9\x00\x9c\x83<" +
	"\x06t\xee4\xfc\xb8\xe1\x96\xe5\xd2\x02\x9c\x07\xb8\x01t" +
	"\xee7\xfc\xbc\xe1\xcd\xa6\xcb&\xe0(.\x03\x9ds\x86" +
	"\x0f\x0co\xb5\xdc\"(\xba\xe0\x17\x0d\x8f\x0c\x9f\x99q" +
	"9\x038aq~\xcf\xf0!\x05e\xd8c\x1b\x82m" +
	"0\x8f\x92\xc0/r\x00\x94\xec\x85 \x893\x1dg\xa5" +
	"\x09\xed\xd2 ?\x8a\xba~p\x09\xdc\xed\xdd\x89\xd4\xe8" +
	"Xs\xad\xf2b\xc7\xb5^\xa9\xea\\\x98\xc4\xb5\xba\xca" +
	"\x99I\x9d\xa77\xc3\xac\xb6]y\xb5\xb3\x9df~\xa6" +
	"\xcb\x10\x9dH\x93\xf1(\xa8\x96U2D=\xe9\xc6`" +
	"F&\xe3\xb3\x95\x8b\xa7LrOJ\xaas\x82\xa5\x89" +
	"g\xba\x80:-\xa9\xce\x1b\x1391Q\xad\x01jU" +
	"R]\x10\x9c\x8b\xfd\xa7\xa7we\x03\x9d\x8ct\x16\xa2" +
	"\x15\xf8\x11\xf7Ap\x1f\x98\x0fG~\x90\x85\x81\x0fN" +
	"\xd9\x9e]\x99\xc0y&q\xdat6Suv\xb7\x99" +
	"\xbe%Iut\xda\xd9\x11\xc3\x0eI\xaa\xfb\xccH\x19" +
	"\x9d\xcb.\xbcH?\xa3\xff\xe3&\x13`\xec\x9e\xf1\x8d" +
	"\x9dq\xde\xaa\xa5\xf8\xb9\x11\xa06%\xd5\xe5Z\x8a_" +
	"\xfd\x14P\x97%\xd5\xdb\xb5\x19\x7f\xcbH\xf5\xa6\xa4\xfa" +
	"@\xfcoc\xf3q\xaa\x8b)\x83g^\xfd/\xf3=" +
	"N\xf5\xa3~\x18\x8d9\xd2\x93Q\xf4\x8a\xbf\xa9J\xf9" +
	"\x9eN\xb30\xf6'\xf3Y&\xf6\x9f\x00\x00\x00\xff\xff" +
	"\x94\x95a_"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d258d93c56221e58,
		Nodes: []uint64{
			0xa79088abb6334aec,
			0xbc7ab37c3dc9daa6,
			0xc8b64858fead2249,
			0xd9a1cd92e8f3c467,
			0xdd6ce297dd67d15e,
		},
		Compressed: true,
	})
}
