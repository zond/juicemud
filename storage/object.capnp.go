// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0xbc7ab37c3dc9daa6

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0xbc7ab37c3dc9daa6, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Object) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Object) Location() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Object) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) SetLocation(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Object) Content() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Object) HasContent() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object) SetContent(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Object) NewContent(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object) Subscriptions() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Object) HasSubscriptions() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object) SetSubscriptions(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewSubscriptions sets the subscriptions field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object) NewSubscriptions(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Object) State() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s Object) HasState() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Object) SetState(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

func (s Object) Source() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Object) SetSource(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

const schema_d258d93c56221e58 = "x\xda4\xcc\xb1J\x03A\x18\xc4\xf1\x99\xdd[\xd3x" +
	"\xc1\x85-\xc4\xc2\x80\xbdB,\x83\xa2X\xda\x98\xaf\xd1" +
	"\xb4\xc9zE\x82\xdc\x85\xdc\xa6\x11\xc1\x97\xb0\x11\x14\x82" +
	"`\xb0\xb7Q\x08XY\x04\x14T\x14T|\x97\x93(" +
	"\xd7\xfe\xfe\xcc,\x8c\xb7\xa3z\xfc@(qf\xae\x18" +
	"\x7fO7On\x8f'\x90\x98,Z\xcb+\xfb\x1b_" +
	"\xad7\x18S\x01\xec\xe3\x95}\xae\x00\xf5\xe9\x01\xb1Z" +
	"d\x9d^\xe2\xc3\x9ag\xbb\x9f\xf6\x1b{\x9d^%\xf1" +
	"\xa1I\xca\xa2\x8e\x80\x88\x80=_\x02\xe4LSF\x8a" +
	"\x96t\x9c\xe1\xe5. \x17\x9ar\xa3h\x95rT\x80" +
	"\xbd\xde\x01d\xa4)\x13E\xab\xb5\xa3\x06\xec\xfd\x00\x90" +
	";MyW\xb4Q\xe4\x18\x01\xf6u\x1d\x90'M\xf9" +
	"T\xa4q4\x80\xfdh\x00\xf2\xa2)?\x8a\xba{\xc8" +
	"\x18\x8a1X\x1ce\xbe\x1d\xbaY\x0a\xa0\xb4S\x9f\xa5" +
	"!I\x03\xab`S\xf3\x8f\xab`\x91\x0f;\xb9\x1ft" +
	"\xfb\xa8\xcd\x06y\x99\xe7\xffs-\x0f\xed\x90\x94\x1f[" +
	"y6\x1c\xf8\x84\x06\x8a\x06\xfc\x0d\x00\x00\xff\xff\xc1\xe9" +
	"C_"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d258d93c56221e58,
		Nodes: []uint64{
			0xbc7ab37c3dc9daa6,
		},
		Compressed: true,
	})
}
