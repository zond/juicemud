// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0xbc7ab37c3dc9daa6

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 9})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 9})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0xbc7ab37c3dc9daa6, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Object) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Object) Location() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Object) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) SetLocation(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Object) Content() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Object) HasContent() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object) SetContent(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Object) NewContent(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object) Callbacks() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Object) HasCallbacks() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object) SetCallbacks(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCallbacks sets the callbacks field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object) NewCallbacks(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Object) Skills() (Object_Skill_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Object_Skill_List(p.List()), err
}

func (s Object) HasSkills() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Object) SetSkills(v Object_Skill_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSkills sets the skills field to a newly
// allocated Object_Skill_List, preferring placement in s's segment.
func (s Object) NewSkills(n int32) (Object_Skill_List, error) {
	l, err := NewObject_Skill_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Skill_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Object) Descriptions() (Object_Description_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Object_Description_List(p.List()), err
}

func (s Object) HasDescriptions() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Object) SetDescriptions(v Object_Description_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewDescriptions sets the descriptions field to a newly
// allocated Object_Description_List, preferring placement in s's segment.
func (s Object) NewDescriptions(n int32) (Object_Description_List, error) {
	l, err := NewObject_Description_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Description_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Object) Exits() (Object_Exit_List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return Object_Exit_List(p.List()), err
}

func (s Object) HasExits() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Object) SetExits(v Object_Exit_List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewExits sets the exits field to a newly
// allocated Object_Exit_List, preferring placement in s's segment.
func (s Object) NewExits(n int32) (Object_Exit_List, error) {
	l, err := NewObject_Exit_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Exit_List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s Object) State() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s Object) HasState() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Object) StateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s Object) SetState(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s Object) Source() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s Object) HasSource() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s Object) SourceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s Object) SetSource(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 9}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

type Object_Skill capnp.Struct

// Object_Skill_TypeID is the unique identifier for the type Object_Skill.
const Object_Skill_TypeID = 0xc8b64858fead2249

func NewObject_Skill(s *capnp.Segment) (Object_Skill, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Skill(st), err
}

func NewRootObject_Skill(s *capnp.Segment) (Object_Skill, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Skill(st), err
}

func ReadRootObject_Skill(msg *capnp.Message) (Object_Skill, error) {
	root, err := msg.Root()
	return Object_Skill(root.Struct()), err
}

func (s Object_Skill) String() string {
	str, _ := text.Marshal(0xc8b64858fead2249, capnp.Struct(s))
	return str
}

func (s Object_Skill) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Skill) DecodeFromPtr(p capnp.Ptr) Object_Skill {
	return Object_Skill(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Skill) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Skill) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Skill) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Skill) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Skill) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Skill) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Skill) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Skill) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Skill) Theoretical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Object_Skill) SetTheoretical(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Object_Skill) Practical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Object_Skill) SetPractical(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Object_Skill_List is a list of Object_Skill.
type Object_Skill_List = capnp.StructList[Object_Skill]

// NewObject_Skill creates a new list of Object_Skill.
func NewObject_Skill_List(s *capnp.Segment, sz int32) (Object_Skill_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Object_Skill](l), err
}

// Object_Skill_Future is a wrapper for a Object_Skill promised by a client call.
type Object_Skill_Future struct{ *capnp.Future }

func (f Object_Skill_Future) Struct() (Object_Skill, error) {
	p, err := f.Future.Ptr()
	return Object_Skill(p.Struct()), err
}

type Object_Challenge capnp.Struct

// Object_Challenge_TypeID is the unique identifier for the type Object_Challenge.
const Object_Challenge_TypeID = 0xd9a1cd92e8f3c467

func NewObject_Challenge(s *capnp.Segment) (Object_Challenge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Object_Challenge(st), err
}

func NewRootObject_Challenge(s *capnp.Segment) (Object_Challenge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Object_Challenge(st), err
}

func ReadRootObject_Challenge(msg *capnp.Message) (Object_Challenge, error) {
	root, err := msg.Root()
	return Object_Challenge(root.Struct()), err
}

func (s Object_Challenge) String() string {
	str, _ := text.Marshal(0xd9a1cd92e8f3c467, capnp.Struct(s))
	return str
}

func (s Object_Challenge) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Challenge) DecodeFromPtr(p capnp.Ptr) Object_Challenge {
	return Object_Challenge(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Challenge) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Challenge) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Challenge) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Challenge) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Challenge) Skill() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Challenge) HasSkill() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Challenge) SkillBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Challenge) SetSkill(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Challenge) Level() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Object_Challenge) SetLevel(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Object_Challenge) FailMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object_Challenge) HasFailMessage() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object_Challenge) FailMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object_Challenge) SetFailMessage(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Object_Challenge_List is a list of Object_Challenge.
type Object_Challenge_List = capnp.StructList[Object_Challenge]

// NewObject_Challenge creates a new list of Object_Challenge.
func NewObject_Challenge_List(s *capnp.Segment, sz int32) (Object_Challenge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Object_Challenge](l), err
}

// Object_Challenge_Future is a wrapper for a Object_Challenge promised by a client call.
type Object_Challenge_Future struct{ *capnp.Future }

func (f Object_Challenge_Future) Struct() (Object_Challenge, error) {
	p, err := f.Future.Ptr()
	return Object_Challenge(p.Struct()), err
}

type Object_Description capnp.Struct

// Object_Description_TypeID is the unique identifier for the type Object_Description.
const Object_Description_TypeID = 0xa79088abb6334aec

func NewObject_Description(s *capnp.Segment) (Object_Description, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Description(st), err
}

func NewRootObject_Description(s *capnp.Segment) (Object_Description, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Description(st), err
}

func ReadRootObject_Description(msg *capnp.Message) (Object_Description, error) {
	root, err := msg.Root()
	return Object_Description(root.Struct()), err
}

func (s Object_Description) String() string {
	str, _ := text.Marshal(0xa79088abb6334aec, capnp.Struct(s))
	return str
}

func (s Object_Description) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Description) DecodeFromPtr(p capnp.Ptr) Object_Description {
	return Object_Description(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Description) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Description) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Description) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Description) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Description) Short() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Description) HasShort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Description) ShortBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Description) SetShort(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Description) Long() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object_Description) HasLong() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object_Description) LongBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object_Description) SetLong(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Object_Description) Tags() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Object_Description) HasTags() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object_Description) SetTags(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object_Description) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object_Description) Challenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Description) HasChallenges() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object_Description) SetChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewChallenges sets the challenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Description) NewChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Object_Description_List is a list of Object_Description.
type Object_Description_List = capnp.StructList[Object_Description]

// NewObject_Description creates a new list of Object_Description.
func NewObject_Description_List(s *capnp.Segment, sz int32) (Object_Description_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Object_Description](l), err
}

// Object_Description_Future is a wrapper for a Object_Description promised by a client call.
type Object_Description_Future struct{ *capnp.Future }

func (f Object_Description_Future) Struct() (Object_Description, error) {
	p, err := f.Future.Ptr()
	return Object_Description(p.Struct()), err
}

type Object_Exit capnp.Struct

// Object_Exit_TypeID is the unique identifier for the type Object_Exit.
const Object_Exit_TypeID = 0xdd6ce297dd67d15e

func NewObject_Exit(s *capnp.Segment) (Object_Exit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Object_Exit(st), err
}

func NewRootObject_Exit(s *capnp.Segment) (Object_Exit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Object_Exit(st), err
}

func ReadRootObject_Exit(msg *capnp.Message) (Object_Exit, error) {
	root, err := msg.Root()
	return Object_Exit(root.Struct()), err
}

func (s Object_Exit) String() string {
	str, _ := text.Marshal(0xdd6ce297dd67d15e, capnp.Struct(s))
	return str
}

func (s Object_Exit) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Exit) DecodeFromPtr(p capnp.Ptr) Object_Exit {
	return Object_Exit(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Exit) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Exit) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Exit) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Exit) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Exit) Descriptions() (Object_Description_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Object_Description_List(p.List()), err
}

func (s Object_Exit) HasDescriptions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Exit) SetDescriptions(v Object_Description_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDescriptions sets the descriptions field to a newly
// allocated Object_Description_List, preferring placement in s's segment.
func (s Object_Exit) NewDescriptions(n int32) (Object_Description_List, error) {
	l, err := NewObject_Description_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Description_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Object_Exit) UseChallenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Exit) HasUseChallenges() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object_Exit) SetUseChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewUseChallenges sets the useChallenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Exit) NewUseChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Object_Exit) LookChallenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Exit) HasLookChallenges() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object_Exit) SetLookChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewLookChallenges sets the lookChallenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Exit) NewLookChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Object_Exit) SniffChallenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Exit) HasSniffChallenges() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Object_Exit) SetSniffChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSniffChallenges sets the sniffChallenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Exit) NewSniffChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Object_Exit) HearChallenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Exit) HasHearChallenges() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Object_Exit) SetHearChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewHearChallenges sets the hearChallenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Exit) NewHearChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Object_Exit) Destination() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s Object_Exit) HasDestination() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object_Exit) SetDestination(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// Object_Exit_List is a list of Object_Exit.
type Object_Exit_List = capnp.StructList[Object_Exit]

// NewObject_Exit creates a new list of Object_Exit.
func NewObject_Exit_List(s *capnp.Segment, sz int32) (Object_Exit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return capnp.StructList[Object_Exit](l), err
}

// Object_Exit_Future is a wrapper for a Object_Exit promised by a client call.
type Object_Exit_Future struct{ *capnp.Future }

func (f Object_Exit_Future) Struct() (Object_Exit, error) {
	p, err := f.Future.Ptr()
	return Object_Exit(p.Struct()), err
}

const schema_d258d93c56221e58 = "x\xda\x8cTOh\x1cU\x1c\xfe\xbe\xf7vvc\xc9" +
	"6\x19f\x02V\xc4\x95RA\x0a\x8a&\x17-\x95\x14" +
	"\xdbbZR\xcc\xcb\x16\x8dR\xa4\x93\xd9\x97\xddI\xc6" +
	"\x99eg\"%4\xf8\xe7\xe4Q\xbcX\x8fz\xd0\x83" +
	"\x88\x16\xb5'=\x08\x1eZQ\xb0\xc5K\x85^\xbcX" +
	"\xa1\x82\x7fz\x11\xc4\x917\xbb3;\x84\xda\xf66\xf3" +
	"\xbdo\xde\xfb\xe6\xfb\xbe\xdf{lA\x1c\xaa=\xdel" +
	"I\x08\xb5\xcf\xaag7\x8e\xcf]\xf8\xe8\xcd\xb7>\x84" +
	"\xed2\xfb\xe0\xa7KO\x9d\xfdl\xebKX\xb5\x060" +
	"\xb7IA\xe7u6\x00g\x9b\xbf\xa0\xb2n7\x99\xad" +
	"<\xb0\xf7\xb9\x83WW\xae\xc0\xba\xc706\xc5\xfb\xce" +
	"\xb6x\x06\x98;/2\x82\xd9\xb1\xbd\x1f\xff\xbb\xb2p" +
	"\xe1\"\x94\xcb\xea\xd6\xf9~M\xeb\x8a\xb3\xc72O3" +
	"\xd6'`\xd6\xfd\xe6\xaf\xebo\x7f\xff\xde\xd5\x9dda" +
	"(_X\x7f:_\xe7\xe4\xafr\xf2K\x97\xbb\xd7\xde" +
	"\xf99\xbc\xb6Cs\xdd0^\xa8\x7f\xebh\xf34\xe7" +
	"\xd5\x9f'\x1e\xc9\xe2\xd5u\xed\xa7\x8f\xfa\xd2\xebG\xfd" +
	"\x03\xcf\x0e\xdf\x8e\xe8\xc4\x1f\x04\xfd4\x88#,\x91j" +
	"Z\xd6\x80\x1a\x01\xdb\x9b\x05\xd4)I\xd5\x13\xb4I\x97" +
	"\x06\xd4\xfb\x01uZR\x85\x82\xb6\x10.\x05`\x07\x06" +
	"\xecH\xaa\xd7\x04m)]J\xc0\xde~\x11Pg%" +
	"\xd59\xc1V\xd2\x8b\x07)'!8\x09N\x85q\xd4" +
	"-_R\xaf\x9bp7\xb8$\x99c\xbb\xc1\xcc\xefy" +
	"a\xa8\xa3.\xa4.\xd7\xa6\xc7\xce\x809\xab\xf8\x1f\x16" +
	"\xff\xd3\xd0~\xaa\xa6Y1\xdc\xde3;\xfe\xcc\x9eY" +
	"\xae\x84<\xb3Zqof\x7f\xab\xbd\x11\x84av\xb8" +
	"8\x99:+\xacA#\x88\xa3\xa9\xa3g\x82T\xed+" +
	"\xdd\xf9\xed>@]\x97T7+\xee\xfcq\x1cP\xbf" +
	"K\xaa\x7f*\xee\xfc\xfd4\xa0nJ\xb6\xa79\xb6\xc7" +
	"ir\x19hOR\xb2\xfd\xb0\xc1k5\x975\xc0y" +
	"\x88\x07\x80\xf6\x83\x06?hp\xcbri\x01\xce\x93\\" +
	"\x07\xdaO\x18\xfc\xa4\xc1\xebu\x97u\xc0Q\x9c\x05\xda" +
	"\x8b\x06\xef\x19\xbc\xd1p\xf3Z\xe9\x1c?m\xf0\xd0\xe0" +
	"\x13\x13.'\x00'\xc8\xf7\xef\x18\xbcOA\x19t\xd8" +
	"\x84`\x13\xcc\xc2\xd8\xf7\xf2\x1e\x00\x05\xf6\xaa\x1fG\xa9" +
	"\x8e\xd2\"\x84f\x11\x90\x17\x86\xab\x9e\xbf\x01\xee\xccn" +
	">1>VR+\xb3\x18\xa5\xd6)\\\x9d\x0a\xe2\xa8" +
	"\xc2+\x93\x19\xf2Z\xfaL\x90V\x96\xcb\xacF\xcbI" +
	"\xea\xa5\xba(\xd1|\x12o\x0e\xfc\xf2\xb5l\x86\xa86" +
	"\xdd\x04\xcc\xd0t|\xb2L\xf1\xa8i\xee!I\xb5(" +
	"X\x84xl\x15P\x0b\x92\xea\xa4\x09\x91\xc3\x10\xd52" +
	"\xa0\x96$\xd5)\xc1\xa9\xc8{y|V\xda\xd3\xf1@" +
	"\xa7\x01\x1a\xbe\x17r\x17\x04w\x81Y\x7f\xe0\xf9i\xe0" +
	"{\xe0\x18\xbb\xa5*S\xb8\x96i\x9c\xde\xa1l\xf6\x16" +
	"\xca\x0cvDR-U\x94\x9d0r\x17%\xd5\x8a\x99" +
	"3c~!\xad\x15\xeaW\xf4\xf8\xf85/\x08O\xe8" +
	"$A\xc3\xeb\xde\xc1*\xd3u\xe4\xd7\xc1\xbd\xa5\xa0w" +
	"\xd7\x01uNR}^)\xfc\xf9\x01\xa0>\x95T\xdf" +
	"\x99\xaa\x8e\x0a\x7f\xc9(\xba(\xa9~42G\xd7\xc1" +
	"\xe5-@\xfd \xa9n\x98!\x18\x96\xdd\xfe\xf5\x8d\xe1" +
	"\x10\xb5k\xf9\x08\x8c\xaaNn\x01\xcb\xa6\xa1\xf7S\xdc" +
	"ua\xb2\xcdD\xe7\xd3\x8b\x96q\xf36\xf7FG'" +
	"i\x10y\xc3\xb9\xae\xb4?\xde0\xdfc>\xbc\xc3\xf7" +
	"I\x14\xac\xad\x1d\xeey\x0c\x87L\xfc?\xb5\xa7\xbd\xc1" +
	"]m\xfa_\x00\x00\x00\xff\xff\xeb6\x92\xee"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d258d93c56221e58,
		Nodes: []uint64{
			0xa79088abb6334aec,
			0xbc7ab37c3dc9daa6,
			0xc8b64858fead2249,
			0xd9a1cd92e8f3c467,
			0xdd6ce297dd67d15e,
		},
		Compressed: true,
	})
}
