// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0xbc7ab37c3dc9daa6

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0xbc7ab37c3dc9daa6, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Object) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Object) Location() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Object) HasLocation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) SetLocation(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s Object) Content() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Object) HasContent() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object) SetContent(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Object) NewContent(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object) Callbacks() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Object) HasCallbacks() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object) SetCallbacks(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCallbacks sets the callbacks field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object) NewCallbacks(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Object) Skills() (Object_Skill_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Object_Skill_List(p.List()), err
}

func (s Object) HasSkills() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Object) SetSkills(v Object_Skill_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSkills sets the skills field to a newly
// allocated Object_Skill_List, preferring placement in s's segment.
func (s Object) NewSkills(n int32) (Object_Skill_List, error) {
	l, err := NewObject_Skill_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Skill_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s Object) Descriptions() (Object_Description_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Object_Description_List(p.List()), err
}

func (s Object) HasDescriptions() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Object) SetDescriptions(v Object_Description_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewDescriptions sets the descriptions field to a newly
// allocated Object_Description_List, preferring placement in s's segment.
func (s Object) NewDescriptions(n int32) (Object_Description_List, error) {
	l, err := NewObject_Description_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Description_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Object) State() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s Object) HasState() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Object) StateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s Object) SetState(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

func (s Object) Source() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s Object) HasSource() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Object) SourceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s Object) SetSource(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 8}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

type Object_Skill capnp.Struct

// Object_Skill_TypeID is the unique identifier for the type Object_Skill.
const Object_Skill_TypeID = 0xc8b64858fead2249

func NewObject_Skill(s *capnp.Segment) (Object_Skill, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Skill(st), err
}

func NewRootObject_Skill(s *capnp.Segment) (Object_Skill, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Skill(st), err
}

func ReadRootObject_Skill(msg *capnp.Message) (Object_Skill, error) {
	root, err := msg.Root()
	return Object_Skill(root.Struct()), err
}

func (s Object_Skill) String() string {
	str, _ := text.Marshal(0xc8b64858fead2249, capnp.Struct(s))
	return str
}

func (s Object_Skill) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Skill) DecodeFromPtr(p capnp.Ptr) Object_Skill {
	return Object_Skill(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Skill) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Skill) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Skill) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Skill) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Skill) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Skill) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Skill) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Skill) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Skill) Theoretical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Object_Skill) SetTheoretical(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Object_Skill) Practical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Object_Skill) SetPractical(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Object_Skill_List is a list of Object_Skill.
type Object_Skill_List = capnp.StructList[Object_Skill]

// NewObject_Skill creates a new list of Object_Skill.
func NewObject_Skill_List(s *capnp.Segment, sz int32) (Object_Skill_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Object_Skill](l), err
}

// Object_Skill_Future is a wrapper for a Object_Skill promised by a client call.
type Object_Skill_Future struct{ *capnp.Future }

func (f Object_Skill_Future) Struct() (Object_Skill, error) {
	p, err := f.Future.Ptr()
	return Object_Skill(p.Struct()), err
}

type Object_Challenge capnp.Struct

// Object_Challenge_TypeID is the unique identifier for the type Object_Challenge.
const Object_Challenge_TypeID = 0xd9a1cd92e8f3c467

func NewObject_Challenge(s *capnp.Segment) (Object_Challenge, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Challenge(st), err
}

func NewRootObject_Challenge(s *capnp.Segment) (Object_Challenge, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Object_Challenge(st), err
}

func ReadRootObject_Challenge(msg *capnp.Message) (Object_Challenge, error) {
	root, err := msg.Root()
	return Object_Challenge(root.Struct()), err
}

func (s Object_Challenge) String() string {
	str, _ := text.Marshal(0xd9a1cd92e8f3c467, capnp.Struct(s))
	return str
}

func (s Object_Challenge) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Challenge) DecodeFromPtr(p capnp.Ptr) Object_Challenge {
	return Object_Challenge(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Challenge) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Challenge) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Challenge) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Challenge) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Challenge) Skill() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Challenge) HasSkill() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Challenge) SkillBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Challenge) SetSkill(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Challenge) Legel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Object_Challenge) SetLegel(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// Object_Challenge_List is a list of Object_Challenge.
type Object_Challenge_List = capnp.StructList[Object_Challenge]

// NewObject_Challenge creates a new list of Object_Challenge.
func NewObject_Challenge_List(s *capnp.Segment, sz int32) (Object_Challenge_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Object_Challenge](l), err
}

// Object_Challenge_Future is a wrapper for a Object_Challenge promised by a client call.
type Object_Challenge_Future struct{ *capnp.Future }

func (f Object_Challenge_Future) Struct() (Object_Challenge, error) {
	p, err := f.Future.Ptr()
	return Object_Challenge(p.Struct()), err
}

type Object_Description capnp.Struct

// Object_Description_TypeID is the unique identifier for the type Object_Description.
const Object_Description_TypeID = 0xa79088abb6334aec

func NewObject_Description(s *capnp.Segment) (Object_Description, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Description(st), err
}

func NewRootObject_Description(s *capnp.Segment) (Object_Description, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Object_Description(st), err
}

func ReadRootObject_Description(msg *capnp.Message) (Object_Description, error) {
	root, err := msg.Root()
	return Object_Description(root.Struct()), err
}

func (s Object_Description) String() string {
	str, _ := text.Marshal(0xa79088abb6334aec, capnp.Struct(s))
	return str
}

func (s Object_Description) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object_Description) DecodeFromPtr(p capnp.Ptr) Object_Description {
	return Object_Description(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object_Description) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object_Description) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object_Description) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object_Description) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object_Description) Short() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Object_Description) HasShort() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object_Description) ShortBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Object_Description) SetShort(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Object_Description) Long() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object_Description) HasLong() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object_Description) LongBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object_Description) SetLong(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Object_Description) Tags() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Object_Description) HasTags() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Object_Description) SetTags(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Object_Description) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Object_Description) Challenges() (Object_Challenge_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Object_Challenge_List(p.List()), err
}

func (s Object_Description) HasChallenges() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Object_Description) SetChallenges(v Object_Challenge_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewChallenges sets the challenges field to a newly
// allocated Object_Challenge_List, preferring placement in s's segment.
func (s Object_Description) NewChallenges(n int32) (Object_Challenge_List, error) {
	l, err := NewObject_Challenge_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Object_Challenge_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Object_Description_List is a list of Object_Description.
type Object_Description_List = capnp.StructList[Object_Description]

// NewObject_Description creates a new list of Object_Description.
func NewObject_Description_List(s *capnp.Segment, sz int32) (Object_Description_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Object_Description](l), err
}

// Object_Description_Future is a wrapper for a Object_Description promised by a client call.
type Object_Description_Future struct{ *capnp.Future }

func (f Object_Description_Future) Struct() (Object_Description, error) {
	p, err := f.Future.Ptr()
	return Object_Description(p.Struct()), err
}

const schema_d258d93c56221e58 = "x\xdal\x93Kh\xdcV\x18\x85\xcf\xb9W\x9aq\xcd" +
	"\x8cm!\xadJ\xdb1\xa6\x8b\xb6\xe0\xe2Wiml" +
	"l\xfa\x00\x8f)\xd4\xd7\xd3\x16S\xbc\xa8F\x163\xb2" +
	"Ui\x98Q)-.\xed\xb2\xdd\xb5\x85B7]$" +
	"\x8bd\x11B\x16\x01\xaf\xb2\x0c8\x81d\x11\x93\x80\x1d" +
	"\x08d\x97,\xb2\xc8k\x1d\x85;\x8e4\"x\xa7{" +
	"\xee\xaf\xff\xf1\x9d\xffN\xfd\xcf\x15c\xbaz  \xd4" +
	"\xb8YJ\x1f\xad\xcd\xee_\xf8\xe3\xaf\xf3\xb0\x1c\xa6\xe7" +
	"\xee^_\xda\xbb\xfc\xcb\x15\x98F\x19\x98\xadS\xd0\xfe" +
	"\x86e\xc0V|\x80\xc2\xbdUe\xba\xf9\xce\xc4\xb7\x8b" +
	"\xc7\x9b\x870\x87tD]\x9c\xb5\x95\xf8\x18\x98\xfdY" +
	"\x1c\x10L\xeb\x13\x17_l\xae\xee_\x83rXL\xdd" +
	"\xcf\xf7\xa7qh\xff\xab\x8b\xd8\x7f\x1b\x97\xc0\xb4u\xf5" +
	"\xd9\xc3\x7fn\x9e9>5x\xda|j/\x99\xfak" +
	"\xde\xfc\x09\x93i\xdc\xdc\xf1\xbd\xe4CO\xba\x9d\xa8\xb3" +
	"\xf0\xd5\xc9\xe9s\xbf\xe7u\x83N\x12\xc4\x11\xd6I5" +
	"&\x0d\xc0 `\xb93\x80\xda\x92TmA\x8bt\xa8" +
	"E\xff\x03@}/\xa9BAK\x08\x87\x02\xb0\x02-" +
	"nK\xaa\xdf\x05-)\x1dJ\xc0\xfa\xf5;@\xedI" +
	"\xaa\xff\x04k\xbdv\xdcMX\x81`\x05\x1c\x0d\xe3\xa8" +
	"\x95\x1f\x12\xb7\xd5\xe3\x08\xb8.\xd9\xd7F\xc0\xd4k\xbb" +
	"a\xe8G-H?\xbf\x1b\x1b\x0c\x0b\xf6\xa3\xb2y\x98" +
	"\xcdS\xf6\xbdDUX`hY3\x83\xdf\xac\xeaF" +
	"\xc1\xb7j\xb3\xd6\xd8\x0d\xc20\xfd,+F?\xcdh" +
	"\xa0\x1c\xc4\x91\x1a\xcfY\xdcz\x13P7$\xd5Q\x81" +
	"\xc5\x9d5@\xdd\x96T\xf7\x0b,\xee}\x0a\xa8#I" +
	"\xf5\xbc\xc0\xe2\xc9\x06\xa0\x1eK6*\x14\xb4\x0c\xc3\xa1" +
	"\x01\xd8op\x01h\x18\x94l\x8ck\xdd4\x1d\x9a\x80" +
	"\xfd6w\x80\xc6[Z\xffD\xeb\xa5\x92\xc3\x12`\x7f" +
	"\xc4\x19\xa01\xa5\xf5E\xad\x97\xcbN\xdf\xe7\xf9~\x9e" +
	"9\xad\xafPP\x06\xdb\xacB\xb0\x0a\xa6a\xec\xb9}" +
	"k\x81L\xfb\xcd\x8b\xa3\xc4\x8f\x92\x8ck5c\xee\x86" +
	"a\xd3\xf5v\xc1\xd7\xedX\xeeiN\x05#r\xbc\xaf" +
	"\x8c\xd8\xce\xa8\x8d\x06qT\x88\xcba\x9f\xc4\xd5z\x89" +
	"\x9b\xf8\x99\xf1\xcb\xbd\xf8\xc7\xae\x97\x1fs7Eq;" +
	"\xb5C\x0c\xf5^Vr/\xbe\xd0\xdb\xb6\"\xa9\xbe\x14" +
	"\xcc\xac\xa87\x01\xb5*\xa9\xbe\xd6V\xf0\xc4\x0a\xa5\xa9" +
	"\xafK\xaa-\xc1\xd1\xc8\xfdaP+i\xfbq\xd7O" +
	"\x02\x94=7\xe40\x04\x87\xc1\xb4\xd3u\xbd$\xf0\\" +
	"p\xa0\x9d\xda\x95\xde\x98\x9a^\x19_w6\x94w\xf6" +
	"\xbe~1\xefJ\xaa\xa9Ag\x93Z{OR\xcd\xe9" +
	"g\xa0Af]\xd4B\xbf\xe5\xe7\x95^\x06\x00\x00\xff" +
	"\xff!\x81\xfep"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d258d93c56221e58,
		Nodes: []uint64{
			0xa79088abb6334aec,
			0xbc7ab37c3dc9daa6,
			0xc8b64858fead2249,
			0xd9a1cd92e8f3c467,
		},
		Compressed: true,
	})
}
