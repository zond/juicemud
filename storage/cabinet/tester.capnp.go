// Code generated by capnpc-go. DO NOT EDIT.

package cabinet

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Tester capnp.Struct

// Tester_TypeID is the unique identifier for the type Tester.
const Tester_TypeID = 0xd26791fd9f273e7c

func NewTester(s *capnp.Segment) (Tester, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tester(st), err
}

func NewRootTester(s *capnp.Segment) (Tester, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Tester(st), err
}

func ReadRootTester(msg *capnp.Message) (Tester, error) {
	root, err := msg.Root()
	return Tester(root.Struct()), err
}

func (s Tester) String() string {
	str, _ := text.Marshal(0xd26791fd9f273e7c, capnp.Struct(s))
	return str
}

func (s Tester) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tester) DecodeFromPtr(p capnp.Ptr) Tester {
	return Tester(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tester) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tester) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tester) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tester) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tester) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tester) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tester) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tester) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tester) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tester) HasComment() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tester) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tester) SetComment(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Tester_List is a list of Tester.
type Tester_List = capnp.StructList[Tester]

// NewTester creates a new list of Tester.
func NewTester_List(s *capnp.Segment, sz int32) (Tester_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Tester](l), err
}

// Tester_Future is a wrapper for a Tester promised by a client call.
type Tester_Future struct{ *capnp.Future }

func (f Tester_Future) Struct() (Tester, error) {
	p, err := f.Future.Ptr()
	return Tester(p.Struct()), err
}

const schema_92a04dbafae7b303 = "x\xda\x12Hp`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xbf\xc6N}\xfe\xdf\x89\xe9\x97\x18\x04y\x19\xff3" +
	"o~\xfek\x97\xef\x82I\x0c\xacL\xec\x0c\x0c\x82G" +
	"\x17\x09\x9e\x05\xd1'\xcb\x19t\xff\x97\xa4\x16\x97\xa4\x16" +
	"\xe9%3&\x16\xe4\x15X\x85\xa4\x16\xb3\x97\xa4\x16\x05" +
	"02\x06r0\xb300\xb0020\x08jj1" +
	"0\x04\xaa03\x06\x1a01\x0a22\x8a0\x82\x04" +
	"u\x9d\x18\x18\x025\x98\x19\x03M\x98\x18\xf9\xf3\x12s" +
	"S\x19y\x18\x98\x18y\x18\x18\xeb\x93\xf3ssS\xf3" +
	"J`|@\x00\x00\x00\xff\xff\x8c\x0d\"\xf3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_92a04dbafae7b303,
		Nodes: []uint64{
			0xd26791fd9f273e7c,
		},
		Compressed: true,
	})
}
