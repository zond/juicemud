// Code generated by capnpc-go. DO NOT EDIT.

package storage

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Group capnp.Struct

// Group_TypeID is the unique identifier for the type Group.
const Group_TypeID = 0xf5c36e55a1928081

func NewGroup(s *capnp.Segment) (Group, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Group(st), err
}

func NewRootGroup(s *capnp.Segment) (Group, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Group(st), err
}

func ReadRootGroup(msg *capnp.Message) (Group, error) {
	root, err := msg.Root()
	return Group(root.Struct()), err
}

func (s Group) String() string {
	str, _ := text.Marshal(0xf5c36e55a1928081, capnp.Struct(s))
	return str
}

func (s Group) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Group) DecodeFromPtr(p capnp.Ptr) Group {
	return Group(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Group) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Group) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Group) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Group) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Group) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Group) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Group) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Group) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Group) OwnerGroup() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Group) HasOwnerGroup() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Group) OwnerGroupBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Group) SetOwnerGroup(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Group_List is a list of Group.
type Group_List = capnp.StructList[Group]

// NewGroup creates a new list of Group.
func NewGroup_List(s *capnp.Segment, sz int32) (Group_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Group](l), err
}

// Group_Future is a wrapper for a Group promised by a client call.
type Group_Future struct{ *capnp.Future }

func (f Group_Future) Struct() (Group, error) {
	p, err := f.Future.Ptr()
	return Group(p.Struct()), err
}
